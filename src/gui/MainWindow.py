# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Mon Jan 23 22:48:58 2012

import wx

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode

# end wxGlade

from logic.FileScanner import FileScanner
from logic.RuleParser import RuleParser
from logic.RuleParser import RuleParseException
from logic.Renamer import Renamer
from logic.RuleSet import RuleSet
from logic.RuleSet import RuleCheckException

class MainWindow(wx.Frame):
    _CHANGE_DELAY_MS = 1200
    
    _IMG_FOLDER = 0
    _IMG_FILE = 1
    _IMG_ERROR = 2
    
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainWindow.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.sizer_renames_staticbox = wx.StaticBox(self, -1, "Renamed Files")
        self.sizer_status_staticbox = wx.StaticBox(self, -1, "Status")
        self.sizer_commands_staticbox = wx.StaticBox(self, -1, "Rename Rules")
        self.label_base_path = wx.StaticText(self, -1, "Base Path")
        self.text_base_path = wx.TextCtrl(self, -1, "")
        self.button_browse_base_path = wx.Button(self, -1, "Browse...")
        self.text_commands = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE|wx.TE_WORDWRAP)
        self.list_files = wx.ListCtrl(self, -1, style=wx.LC_REPORT|wx.LC_VRULES|wx.SUNKEN_BORDER)
        self.label_status = wx.StaticText(self, -1, "label_1")
        self.button_apply = wx.Button(self, wx.ID_APPLY, "")
        self.button_close = wx.Button(self, wx.ID_CLOSE, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TEXT, self._onEditBasePath, self.text_base_path)
        self.Bind(wx.EVT_BUTTON, self._onBrowseBasePath, self.button_browse_base_path)
        self.Bind(wx.EVT_TEXT, self._onEditRules, self.text_commands)
        self.Bind(wx.EVT_BUTTON, self._onClickApply, self.button_apply)
        self.Bind(wx.EVT_BUTTON, self._onClickClose, self.button_close)
        # end wxGlade
        
        self._initImageList()
        self._initTable()
        self.Bind(wx.EVT_SIZE, self._onResized, self)

        self._changeTimer = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self._onChangeTimerExpired, self._changeTimer)
        
        self._updateAll()

    def __set_properties(self):
        # begin wxGlade: MainWindow.__set_properties
        self.SetTitle("BAON")
        self.SetSize((800, 494))
        self.text_commands.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MainWindow.__do_layout
        sizer_master = wx.BoxSizer(wx.VERTICAL)
        sizer_buttons = wx.BoxSizer(wx.HORIZONTAL)
        sizer_status = wx.StaticBoxSizer(self.sizer_status_staticbox, wx.HORIZONTAL)
        sizer_renames = wx.StaticBoxSizer(self.sizer_renames_staticbox, wx.HORIZONTAL)
        sizer_commands = wx.StaticBoxSizer(self.sizer_commands_staticbox, wx.HORIZONTAL)
        sizer_fileset = wx.BoxSizer(wx.HORIZONTAL)
        sizer_fileset.Add(self.label_base_path, 0, wx.RIGHT|wx.ALIGN_CENTER_VERTICAL, 8)
        sizer_fileset.Add(self.text_base_path, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_fileset.Add(self.button_browse_base_path, 0, 0, 0)
        sizer_master.Add(sizer_fileset, 0, wx.ALL|wx.EXPAND, 8)
        sizer_commands.Add(self.text_commands, 1, wx.ALL|wx.EXPAND, 8)
        sizer_master.Add(sizer_commands, 0, wx.LEFT|wx.RIGHT|wx.BOTTOM|wx.EXPAND, 8)
        sizer_renames.Add(self.list_files, 1, wx.ALL|wx.EXPAND, 8)
        sizer_master.Add(sizer_renames, 1, wx.LEFT|wx.RIGHT|wx.BOTTOM|wx.EXPAND, 8)
        sizer_status.Add(self.label_status, 1, wx.ALL|wx.EXPAND, 8)
        sizer_master.Add(sizer_status, 0, wx.LEFT|wx.RIGHT|wx.EXPAND, 8)
        sizer_buttons.Add(self.button_apply, 0, wx.RIGHT, 16)
        sizer_buttons.Add(self.button_close, 0, 0, 0)
        sizer_master.Add(sizer_buttons, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 8)
        self.SetSizer(sizer_master)
        self.Layout()
        self.Centre()
        # end wxGlade

    def _initImageList(self):
        iconSize = (16, 16)
        
        initData = [
                    (self._IMG_FILE, wx.ART_NORMAL_FILE),
                    (self._IMG_FOLDER, wx.ART_FOLDER),
                    (self._IMG_ERROR, wx.ART_ERROR)
                    ]
        
        buff = [ None for dummy in initData ]
        for tupl in initData:
            buff[tupl[0]] = wx.ArtProvider.GetBitmap(tupl[1], wx.ART_OTHER, iconSize)

        imgList = wx.ImageList(iconSize[0], iconSize[1])
        for icn in buff:
            imgList.Add(icn)
        self._imageList = imgList

    def _initTable(self):
        self.list_files.InsertColumn(0, "From")
        self.list_files.InsertColumn(1, "To")
        
        self.list_files.SetImageList(self._imageList, wx.IMAGE_LIST_SMALL)
        
    def _onResized(self, event):
        width = self.list_files.Size[0] / 2
        self.list_files.SetColumnWidth(0, width)
        self.list_files.SetColumnWidth(1, width)
        event.Skip()

    def setup(self, *args, **kwargs):
        if 'basePath' in kwargs:
            self.text_base_path.Value = kwargs['basePath']
        self._updateAll()

    def _showFiles(self, fromList, toList):
        l = self.list_files
     
        while l.ItemCount < len(fromList):
            l.InsertStringItem(l.ItemCount, "")
        while l.ItemCount > len(fromList):
            l.DeleteItem(l.ItemCount - 1)
        
        for i in range(0, len(fromList)):
            col = 0
            for item in [ fromList[i], toList[i] ]:
                if isinstance(item, Exception):
                    text = str(item)
                    img = self._IMG_ERROR
                else:
                    text = item.filename
                    img = self._IMG_FILE if not item.isDir else self._IMG_FOLDER
                
                l.SetStringItem(i, col, text)
                l.SetItemColumnImage(i, col, img)
                col += 1

    def _updateAll(self):
        self._changeTimer.Stop()
        
        ruleset = self._parseCommands()
        files = self._scanFiles()
        
        if files is None:
            filesLeft = filesRight = []
        else:
            filesLeft = filesRight = files
        
        if files is None:
            self._showInfo("Enter the base path for the files that are to be renamed.")
        elif isinstance(files, Exception):
            self._showError(str(files))
        elif len(files) == 0:
            self._showInfo("No files found.")
        else:
            if isinstance(ruleset, Exception):
                self._showError(str(ruleset))
            elif ruleset.isEmpty():
                self._showInfo("{0} files found.".format(len(files)))
            else:
                renamer = Renamer(ruleset)
                filesRight = renamer.rename(filesLeft)
                
                self._showInfo("{0} files processed.".format(len(files)))
        
        self._showFiles(filesLeft, filesRight)
        
    def _scanFiles(self):
        try:
            if self.text_base_path.Value.strip() == "":
                return None
            
            scanner = FileScanner()
            files = scanner.scan(self.text_base_path.Value)
            
            return files
        except Exception as e:
            return e
    
    def _parseCommands(self):
        try:
            if self.text_commands.Value.strip() == "":
                return RuleSet()
            
            parser = RuleParser()
            ruleset = parser.parse(self.text_commands.Value)
            ruleset.semanticCheck()
            
            self._highlightError(None)
            return ruleset
        except RuleCheckException as e:
            self._highlightError(0, 0)
            return e
        except RuleParseException as e:
            self._highlightError(e.line, e.column)
            return e
    
    def _highlightError(self, line = None, col = 0):
        t = self.text_commands
        
        if line is None:
            t.SetStyle(0, t.GetLastPosition(), t.DefaultStyle)
            return
        
        try:
            line = max(line, 0)
            col = max(col, 0)
            
            posn = 0
            for i in range(0, line):
                posn += t.GetLineLength(i) + 1
            posn += col
            
            errStyle = wx.TextAttr(wx.Color(255,0,0))
            t.SetStyle(0, posn, t.DefaultStyle)
            t.SetStyle(posn, t.GetLastPosition(), errStyle)
        except:
            t.SetStyle(0, t.GetLastPosition(), t.DefaultStyle)
        
    def _showInfo(self, message):
        self.label_status.Label = message
        self.label_status.ForegroundColour = self.label_base_path.ForegroundColour

    def _showError(self, message):
        self.label_status.Label = message
        self.label_status.ForegroundColour = wx.Color(255,0,0)

    def _onChangeTimerExpired(self, event):
        self._updateAll()

    def _onEditBasePath(self, event): # wxGlade: MainWindow.<event_handler>
        if self._changeTimer.IsRunning():
            self._changeTimer.Stop()
            
        self._changeTimer.Start(self._CHANGE_DELAY_MS, True)

    def _onEditRules(self, event): # wxGlade: MainWindow.<event_handler>
        if self._changeTimer.IsRunning():
            self._changeTimer.Stop()
            
        self._changeTimer.Start(self._CHANGE_DELAY_MS, True)

    def _onBrowseBasePath(self, event): # wxGlade: MainWindow.<event_handler>
        dialog = wx.DirDialog(self,
                               "Browse For Base Path",
                               "",
                               wx.DD_DEFAULT_STYLE | wx.DD_DIR_MUST_EXIST | wx.DD_CHANGE_DIR)
        if dialog.ShowModal() != dialog.AffirmativeId:
            return
        
        self.text_base_path.Value = dialog.Path
        self._updateAll()
        
    def _onClickApply(self, event): # wxGlade: MainWindow.<event_handler>
        print "Event handler `_onClickApply' not implemented"
        event.Skip()

    def _onClickClose(self, event): # wxGlade: MainWindow.<event_handler>
        self.Close()

# end of class MainWindow
